package com.castlemock.application.Model;

import com.castlemock.application.Model.core.HttpHeader;
import jakarta.persistence.*;

import java.util.List;
@Entity
public class RestMockResponse {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private String id;
    private String projectId;
    private String applicationId;
    private String resourceId;
    private String methodId;
    private String name;
    private String body;
    private Integer httpStatusCode;
    private RestMockResponseStatus status;
    // Use @ElementCollection with @Embeddable for httpHeaders
    @ElementCollection
    @CollectionTable(name = "http_headers", joinColumns = @JoinColumn(name = "response_id"))
    private List<HttpHeader> httpHeaders;


    public String getApplicationId() {
        return applicationId;
    }

    public void setApplicationId(String applicationId) {
        this.applicationId = applicationId;
    }

    public String getResourceId() {
        return resourceId;
    }
    public void setResourceId(String resourceId) {
        this.resourceId = resourceId;
    }
    // Add getter and setter for projectId
    public String getProjectId() {
        return projectId;
    }

    public void setProjectId(String projectId) {
        this.projectId = projectId;
    }

    // Private constructor to enforce usage of builder
    public RestMockResponse(RestMockResponseBuilder builder) {
        this.id = builder.id;
        this.methodId = builder.methodId;
        this.name = builder.name;
        this.body = builder.body;
        this.httpStatusCode = builder.httpStatusCode;
        this.status = builder.status;
        this.httpHeaders = builder.httpHeaders;
    }

    public RestMockResponse(String s, String methodId, String autoGeneratedMockResponseDefaultName, int defaultResponseCode, RestMockResponseStatus restMockResponseStatus, Object o) {
    }

    public RestMockResponse(com.castlemock.application.Model.RestMockResponseBuilder restMockResponseBuilder) {
    }

    // Getters (if needed)
    public String getId() { return id; }
    public String getMethodId() { return methodId; }
    public String getName() { return name; }
    public String getBody() { return body; }
    public Integer getHttpStatusCode() { return httpStatusCode; }
    public RestMockResponseStatus getStatus() { return status; }
    public List<HttpHeader> getHttpHeaders() { return httpHeaders; }

    // Static method to return a new builder instance
    public static RestMockResponseBuilder builder() {
        return new RestMockResponseBuilder();
    }

    // Inner static builder class
    public static class RestMockResponseBuilder {
        private String id;
        private String methodId;
        private String name;
        private String body;
        private Integer httpStatusCode;
        private RestMockResponseStatus status;
        private List<HttpHeader> httpHeaders;

        public RestMockResponseBuilder id(String id) {
            this.id = id;
            return this;
        }

        public RestMockResponseBuilder methodId(String methodId) {
            this.methodId = methodId;
            return this;
        }

        public RestMockResponseBuilder name(String name) {
            this.name = name;
            return this;
        }

        public RestMockResponseBuilder body(String body) {
            this.body = body;
            return this;
        }

        public RestMockResponseBuilder httpStatusCode(Integer httpStatusCode) {
            this.httpStatusCode = httpStatusCode;
            return this;
        }

        public RestMockResponseBuilder status(RestMockResponseStatus status) {
            this.status = status;
            return this;
        }

        public RestMockResponseBuilder httpHeaders(List<HttpHeader> httpHeaders) {
            this.httpHeaders = httpHeaders;
            return this;
        }

        public RestMockResponse build() {
            return new RestMockResponse(this);
        }
    }
}
